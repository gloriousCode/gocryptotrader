// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/queries/qm"
	"github.com/thrasher-corp/sqlboiler/queries/qmhelper"
	"github.com/thrasher-corp/sqlboiler/strmangle"
)

// Datahistoryjobrelation is an object representing the database table.
type Datahistoryjobrelation struct {
	ID                int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	PrerequisiteJobID string `boil:"prerequisite_job_id" json:"prerequisite_job_id" toml:"prerequisite_job_id" yaml:"prerequisite_job_id"`
	FollowingJobID    string `boil:"following_job_id" json:"following_job_id" toml:"following_job_id" yaml:"following_job_id"`

	R *datahistoryjobrelationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L datahistoryjobrelationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DatahistoryjobrelationColumns = struct {
	ID                string
	PrerequisiteJobID string
	FollowingJobID    string
}{
	ID:                "id",
	PrerequisiteJobID: "prerequisite_job_id",
	FollowingJobID:    "following_job_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var DatahistoryjobrelationWhere = struct {
	ID                whereHelperint
	PrerequisiteJobID whereHelperstring
	FollowingJobID    whereHelperstring
}{
	ID:                whereHelperint{field: "\"datahistoryjobrelations\".\"id\""},
	PrerequisiteJobID: whereHelperstring{field: "\"datahistoryjobrelations\".\"prerequisite_job_id\""},
	FollowingJobID:    whereHelperstring{field: "\"datahistoryjobrelations\".\"following_job_id\""},
}

// DatahistoryjobrelationRels is where relationship names are stored.
var DatahistoryjobrelationRels = struct {
	FollowingJob    string
	PrerequisiteJob string
}{
	FollowingJob:    "FollowingJob",
	PrerequisiteJob: "PrerequisiteJob",
}

// datahistoryjobrelationR is where relationships are stored.
type datahistoryjobrelationR struct {
	FollowingJob    *Datahistoryjob
	PrerequisiteJob *Datahistoryjob
}

// NewStruct creates a new relationship struct
func (*datahistoryjobrelationR) NewStruct() *datahistoryjobrelationR {
	return &datahistoryjobrelationR{}
}

// datahistoryjobrelationL is where Load methods for each relationship are stored.
type datahistoryjobrelationL struct{}

var (
	datahistoryjobrelationAllColumns            = []string{"id", "prerequisite_job_id", "following_job_id"}
	datahistoryjobrelationColumnsWithoutDefault = []string{"prerequisite_job_id", "following_job_id"}
	datahistoryjobrelationColumnsWithDefault    = []string{"id"}
	datahistoryjobrelationPrimaryKeyColumns     = []string{"id"}
)

type (
	// DatahistoryjobrelationSlice is an alias for a slice of pointers to Datahistoryjobrelation.
	// This should generally be used opposed to []Datahistoryjobrelation.
	DatahistoryjobrelationSlice []*Datahistoryjobrelation
	// DatahistoryjobrelationHook is the signature for custom Datahistoryjobrelation hook methods
	DatahistoryjobrelationHook func(context.Context, boil.ContextExecutor, *Datahistoryjobrelation) error

	datahistoryjobrelationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	datahistoryjobrelationType                 = reflect.TypeOf(&Datahistoryjobrelation{})
	datahistoryjobrelationMapping              = queries.MakeStructMapping(datahistoryjobrelationType)
	datahistoryjobrelationPrimaryKeyMapping, _ = queries.BindMapping(datahistoryjobrelationType, datahistoryjobrelationMapping, datahistoryjobrelationPrimaryKeyColumns)
	datahistoryjobrelationInsertCacheMut       sync.RWMutex
	datahistoryjobrelationInsertCache          = make(map[string]insertCache)
	datahistoryjobrelationUpdateCacheMut       sync.RWMutex
	datahistoryjobrelationUpdateCache          = make(map[string]updateCache)
	datahistoryjobrelationUpsertCacheMut       sync.RWMutex
	datahistoryjobrelationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var datahistoryjobrelationBeforeInsertHooks []DatahistoryjobrelationHook
var datahistoryjobrelationBeforeUpdateHooks []DatahistoryjobrelationHook
var datahistoryjobrelationBeforeDeleteHooks []DatahistoryjobrelationHook
var datahistoryjobrelationBeforeUpsertHooks []DatahistoryjobrelationHook

var datahistoryjobrelationAfterInsertHooks []DatahistoryjobrelationHook
var datahistoryjobrelationAfterSelectHooks []DatahistoryjobrelationHook
var datahistoryjobrelationAfterUpdateHooks []DatahistoryjobrelationHook
var datahistoryjobrelationAfterDeleteHooks []DatahistoryjobrelationHook
var datahistoryjobrelationAfterUpsertHooks []DatahistoryjobrelationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Datahistoryjobrelation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datahistoryjobrelationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Datahistoryjobrelation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datahistoryjobrelationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Datahistoryjobrelation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datahistoryjobrelationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Datahistoryjobrelation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datahistoryjobrelationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Datahistoryjobrelation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datahistoryjobrelationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Datahistoryjobrelation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datahistoryjobrelationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Datahistoryjobrelation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datahistoryjobrelationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Datahistoryjobrelation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datahistoryjobrelationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Datahistoryjobrelation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datahistoryjobrelationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDatahistoryjobrelationHook registers your hook function for all future operations.
func AddDatahistoryjobrelationHook(hookPoint boil.HookPoint, datahistoryjobrelationHook DatahistoryjobrelationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		datahistoryjobrelationBeforeInsertHooks = append(datahistoryjobrelationBeforeInsertHooks, datahistoryjobrelationHook)
	case boil.BeforeUpdateHook:
		datahistoryjobrelationBeforeUpdateHooks = append(datahistoryjobrelationBeforeUpdateHooks, datahistoryjobrelationHook)
	case boil.BeforeDeleteHook:
		datahistoryjobrelationBeforeDeleteHooks = append(datahistoryjobrelationBeforeDeleteHooks, datahistoryjobrelationHook)
	case boil.BeforeUpsertHook:
		datahistoryjobrelationBeforeUpsertHooks = append(datahistoryjobrelationBeforeUpsertHooks, datahistoryjobrelationHook)
	case boil.AfterInsertHook:
		datahistoryjobrelationAfterInsertHooks = append(datahistoryjobrelationAfterInsertHooks, datahistoryjobrelationHook)
	case boil.AfterSelectHook:
		datahistoryjobrelationAfterSelectHooks = append(datahistoryjobrelationAfterSelectHooks, datahistoryjobrelationHook)
	case boil.AfterUpdateHook:
		datahistoryjobrelationAfterUpdateHooks = append(datahistoryjobrelationAfterUpdateHooks, datahistoryjobrelationHook)
	case boil.AfterDeleteHook:
		datahistoryjobrelationAfterDeleteHooks = append(datahistoryjobrelationAfterDeleteHooks, datahistoryjobrelationHook)
	case boil.AfterUpsertHook:
		datahistoryjobrelationAfterUpsertHooks = append(datahistoryjobrelationAfterUpsertHooks, datahistoryjobrelationHook)
	}
}

// One returns a single datahistoryjobrelation record from the query.
func (q datahistoryjobrelationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Datahistoryjobrelation, error) {
	o := &Datahistoryjobrelation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: failed to execute a one query for datahistoryjobrelations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Datahistoryjobrelation records from the query.
func (q datahistoryjobrelationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DatahistoryjobrelationSlice, error) {
	var o []*Datahistoryjobrelation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "postgres: failed to assign all query results to Datahistoryjobrelation slice")
	}

	if len(datahistoryjobrelationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Datahistoryjobrelation records in the query.
func (q datahistoryjobrelationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to count datahistoryjobrelations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q datahistoryjobrelationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "postgres: failed to check if datahistoryjobrelations exists")
	}

	return count > 0, nil
}

// FollowingJob pointed to by the foreign key.
func (o *Datahistoryjobrelation) FollowingJob(mods ...qm.QueryMod) datahistoryjobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FollowingJobID),
	}

	queryMods = append(queryMods, mods...)

	query := Datahistoryjobs(queryMods...)
	queries.SetFrom(query.Query, "\"datahistoryjob\"")

	return query
}

// PrerequisiteJob pointed to by the foreign key.
func (o *Datahistoryjobrelation) PrerequisiteJob(mods ...qm.QueryMod) datahistoryjobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PrerequisiteJobID),
	}

	queryMods = append(queryMods, mods...)

	query := Datahistoryjobs(queryMods...)
	queries.SetFrom(query.Query, "\"datahistoryjob\"")

	return query
}

// LoadFollowingJob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (datahistoryjobrelationL) LoadFollowingJob(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDatahistoryjobrelation interface{}, mods queries.Applicator) error {
	var slice []*Datahistoryjobrelation
	var object *Datahistoryjobrelation

	if singular {
		object = maybeDatahistoryjobrelation.(*Datahistoryjobrelation)
	} else {
		slice = *maybeDatahistoryjobrelation.(*[]*Datahistoryjobrelation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &datahistoryjobrelationR{}
		}
		args = append(args, object.FollowingJobID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &datahistoryjobrelationR{}
			}

			for _, a := range args {
				if a == obj.FollowingJobID {
					continue Outer
				}
			}

			args = append(args, obj.FollowingJobID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`datahistoryjob`), qm.WhereIn(`datahistoryjob.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Datahistoryjob")
	}

	var resultSlice []*Datahistoryjob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Datahistoryjob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for datahistoryjob")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for datahistoryjob")
	}

	if len(datahistoryjobrelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FollowingJob = foreign
		if foreign.R == nil {
			foreign.R = &datahistoryjobR{}
		}
		foreign.R.FollowingJobDatahistoryjobrelations = append(foreign.R.FollowingJobDatahistoryjobrelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FollowingJobID == foreign.ID {
				local.R.FollowingJob = foreign
				if foreign.R == nil {
					foreign.R = &datahistoryjobR{}
				}
				foreign.R.FollowingJobDatahistoryjobrelations = append(foreign.R.FollowingJobDatahistoryjobrelations, local)
				break
			}
		}
	}

	return nil
}

// LoadPrerequisiteJob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (datahistoryjobrelationL) LoadPrerequisiteJob(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDatahistoryjobrelation interface{}, mods queries.Applicator) error {
	var slice []*Datahistoryjobrelation
	var object *Datahistoryjobrelation

	if singular {
		object = maybeDatahistoryjobrelation.(*Datahistoryjobrelation)
	} else {
		slice = *maybeDatahistoryjobrelation.(*[]*Datahistoryjobrelation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &datahistoryjobrelationR{}
		}
		args = append(args, object.PrerequisiteJobID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &datahistoryjobrelationR{}
			}

			for _, a := range args {
				if a == obj.PrerequisiteJobID {
					continue Outer
				}
			}

			args = append(args, obj.PrerequisiteJobID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`datahistoryjob`), qm.WhereIn(`datahistoryjob.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Datahistoryjob")
	}

	var resultSlice []*Datahistoryjob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Datahistoryjob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for datahistoryjob")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for datahistoryjob")
	}

	if len(datahistoryjobrelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PrerequisiteJob = foreign
		if foreign.R == nil {
			foreign.R = &datahistoryjobR{}
		}
		foreign.R.PrerequisiteJobDatahistoryjobrelations = append(foreign.R.PrerequisiteJobDatahistoryjobrelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PrerequisiteJobID == foreign.ID {
				local.R.PrerequisiteJob = foreign
				if foreign.R == nil {
					foreign.R = &datahistoryjobR{}
				}
				foreign.R.PrerequisiteJobDatahistoryjobrelations = append(foreign.R.PrerequisiteJobDatahistoryjobrelations, local)
				break
			}
		}
	}

	return nil
}

// SetFollowingJob of the datahistoryjobrelation to the related item.
// Sets o.R.FollowingJob to related.
// Adds o to related.R.FollowingJobDatahistoryjobrelations.
func (o *Datahistoryjobrelation) SetFollowingJob(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Datahistoryjob) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"datahistoryjobrelations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"following_job_id"}),
		strmangle.WhereClause("\"", "\"", 2, datahistoryjobrelationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FollowingJobID = related.ID
	if o.R == nil {
		o.R = &datahistoryjobrelationR{
			FollowingJob: related,
		}
	} else {
		o.R.FollowingJob = related
	}

	if related.R == nil {
		related.R = &datahistoryjobR{
			FollowingJobDatahistoryjobrelations: DatahistoryjobrelationSlice{o},
		}
	} else {
		related.R.FollowingJobDatahistoryjobrelations = append(related.R.FollowingJobDatahistoryjobrelations, o)
	}

	return nil
}

// SetPrerequisiteJob of the datahistoryjobrelation to the related item.
// Sets o.R.PrerequisiteJob to related.
// Adds o to related.R.PrerequisiteJobDatahistoryjobrelations.
func (o *Datahistoryjobrelation) SetPrerequisiteJob(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Datahistoryjob) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"datahistoryjobrelations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"prerequisite_job_id"}),
		strmangle.WhereClause("\"", "\"", 2, datahistoryjobrelationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PrerequisiteJobID = related.ID
	if o.R == nil {
		o.R = &datahistoryjobrelationR{
			PrerequisiteJob: related,
		}
	} else {
		o.R.PrerequisiteJob = related
	}

	if related.R == nil {
		related.R = &datahistoryjobR{
			PrerequisiteJobDatahistoryjobrelations: DatahistoryjobrelationSlice{o},
		}
	} else {
		related.R.PrerequisiteJobDatahistoryjobrelations = append(related.R.PrerequisiteJobDatahistoryjobrelations, o)
	}

	return nil
}

// Datahistoryjobrelations retrieves all the records using an executor.
func Datahistoryjobrelations(mods ...qm.QueryMod) datahistoryjobrelationQuery {
	mods = append(mods, qm.From("\"datahistoryjobrelations\""))
	return datahistoryjobrelationQuery{NewQuery(mods...)}
}

// FindDatahistoryjobrelation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDatahistoryjobrelation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Datahistoryjobrelation, error) {
	datahistoryjobrelationObj := &Datahistoryjobrelation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"datahistoryjobrelations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, datahistoryjobrelationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: unable to select from datahistoryjobrelations")
	}

	return datahistoryjobrelationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Datahistoryjobrelation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no datahistoryjobrelations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(datahistoryjobrelationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	datahistoryjobrelationInsertCacheMut.RLock()
	cache, cached := datahistoryjobrelationInsertCache[key]
	datahistoryjobrelationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			datahistoryjobrelationAllColumns,
			datahistoryjobrelationColumnsWithDefault,
			datahistoryjobrelationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(datahistoryjobrelationType, datahistoryjobrelationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(datahistoryjobrelationType, datahistoryjobrelationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"datahistoryjobrelations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"datahistoryjobrelations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "postgres: unable to insert into datahistoryjobrelations")
	}

	if !cached {
		datahistoryjobrelationInsertCacheMut.Lock()
		datahistoryjobrelationInsertCache[key] = cache
		datahistoryjobrelationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Datahistoryjobrelation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Datahistoryjobrelation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	datahistoryjobrelationUpdateCacheMut.RLock()
	cache, cached := datahistoryjobrelationUpdateCache[key]
	datahistoryjobrelationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			datahistoryjobrelationAllColumns,
			datahistoryjobrelationPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("postgres: unable to update datahistoryjobrelations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"datahistoryjobrelations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, datahistoryjobrelationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(datahistoryjobrelationType, datahistoryjobrelationMapping, append(wl, datahistoryjobrelationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update datahistoryjobrelations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by update for datahistoryjobrelations")
	}

	if !cached {
		datahistoryjobrelationUpdateCacheMut.Lock()
		datahistoryjobrelationUpdateCache[key] = cache
		datahistoryjobrelationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q datahistoryjobrelationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all for datahistoryjobrelations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected for datahistoryjobrelations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DatahistoryjobrelationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("postgres: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datahistoryjobrelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"datahistoryjobrelations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, datahistoryjobrelationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all in datahistoryjobrelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected all in update all datahistoryjobrelation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Datahistoryjobrelation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no datahistoryjobrelations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(datahistoryjobrelationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	datahistoryjobrelationUpsertCacheMut.RLock()
	cache, cached := datahistoryjobrelationUpsertCache[key]
	datahistoryjobrelationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			datahistoryjobrelationAllColumns,
			datahistoryjobrelationColumnsWithDefault,
			datahistoryjobrelationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			datahistoryjobrelationAllColumns,
			datahistoryjobrelationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("postgres: unable to upsert datahistoryjobrelations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(datahistoryjobrelationPrimaryKeyColumns))
			copy(conflict, datahistoryjobrelationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"datahistoryjobrelations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(datahistoryjobrelationType, datahistoryjobrelationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(datahistoryjobrelationType, datahistoryjobrelationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "postgres: unable to upsert datahistoryjobrelations")
	}

	if !cached {
		datahistoryjobrelationUpsertCacheMut.Lock()
		datahistoryjobrelationUpsertCache[key] = cache
		datahistoryjobrelationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Datahistoryjobrelation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Datahistoryjobrelation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("postgres: no Datahistoryjobrelation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), datahistoryjobrelationPrimaryKeyMapping)
	sql := "DELETE FROM \"datahistoryjobrelations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete from datahistoryjobrelations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by delete for datahistoryjobrelations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q datahistoryjobrelationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("postgres: no datahistoryjobrelationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from datahistoryjobrelations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for datahistoryjobrelations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DatahistoryjobrelationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(datahistoryjobrelationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datahistoryjobrelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"datahistoryjobrelations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, datahistoryjobrelationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from datahistoryjobrelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for datahistoryjobrelations")
	}

	if len(datahistoryjobrelationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Datahistoryjobrelation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDatahistoryjobrelation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DatahistoryjobrelationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DatahistoryjobrelationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datahistoryjobrelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"datahistoryjobrelations\".* FROM \"datahistoryjobrelations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, datahistoryjobrelationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "postgres: unable to reload all in DatahistoryjobrelationSlice")
	}

	*o = slice

	return nil
}

// DatahistoryjobrelationExists checks if the Datahistoryjobrelation row exists.
func DatahistoryjobrelationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"datahistoryjobrelations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "postgres: unable to check if datahistoryjobrelations exists")
	}

	return exists, nil
}
