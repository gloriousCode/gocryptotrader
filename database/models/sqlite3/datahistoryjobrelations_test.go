// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlite3

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/randomize"
	"github.com/thrasher-corp/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDatahistoryjobrelations(t *testing.T) {
	t.Parallel()

	query := Datahistoryjobrelations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDatahistoryjobrelationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Datahistoryjobrelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDatahistoryjobrelationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Datahistoryjobrelations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Datahistoryjobrelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDatahistoryjobrelationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DatahistoryjobrelationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Datahistoryjobrelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDatahistoryjobrelationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DatahistoryjobrelationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Datahistoryjobrelation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DatahistoryjobrelationExists to return true, but got false.")
	}
}

func testDatahistoryjobrelationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	datahistoryjobrelationFound, err := FindDatahistoryjobrelation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if datahistoryjobrelationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDatahistoryjobrelationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Datahistoryjobrelations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDatahistoryjobrelationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Datahistoryjobrelations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDatahistoryjobrelationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datahistoryjobrelationOne := &Datahistoryjobrelation{}
	datahistoryjobrelationTwo := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, datahistoryjobrelationOne, datahistoryjobrelationDBTypes, false, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}
	if err = randomize.Struct(seed, datahistoryjobrelationTwo, datahistoryjobrelationDBTypes, false, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = datahistoryjobrelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = datahistoryjobrelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Datahistoryjobrelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDatahistoryjobrelationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	datahistoryjobrelationOne := &Datahistoryjobrelation{}
	datahistoryjobrelationTwo := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, datahistoryjobrelationOne, datahistoryjobrelationDBTypes, false, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}
	if err = randomize.Struct(seed, datahistoryjobrelationTwo, datahistoryjobrelationDBTypes, false, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = datahistoryjobrelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = datahistoryjobrelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Datahistoryjobrelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func datahistoryjobrelationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Datahistoryjobrelation) error {
	*o = Datahistoryjobrelation{}
	return nil
}

func datahistoryjobrelationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Datahistoryjobrelation) error {
	*o = Datahistoryjobrelation{}
	return nil
}

func datahistoryjobrelationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Datahistoryjobrelation) error {
	*o = Datahistoryjobrelation{}
	return nil
}

func datahistoryjobrelationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Datahistoryjobrelation) error {
	*o = Datahistoryjobrelation{}
	return nil
}

func datahistoryjobrelationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Datahistoryjobrelation) error {
	*o = Datahistoryjobrelation{}
	return nil
}

func datahistoryjobrelationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Datahistoryjobrelation) error {
	*o = Datahistoryjobrelation{}
	return nil
}

func datahistoryjobrelationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Datahistoryjobrelation) error {
	*o = Datahistoryjobrelation{}
	return nil
}

func datahistoryjobrelationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Datahistoryjobrelation) error {
	*o = Datahistoryjobrelation{}
	return nil
}

func datahistoryjobrelationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Datahistoryjobrelation) error {
	*o = Datahistoryjobrelation{}
	return nil
}

func testDatahistoryjobrelationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Datahistoryjobrelation{}
	o := &Datahistoryjobrelation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation object: %s", err)
	}

	AddDatahistoryjobrelationHook(boil.BeforeInsertHook, datahistoryjobrelationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	datahistoryjobrelationBeforeInsertHooks = []DatahistoryjobrelationHook{}

	AddDatahistoryjobrelationHook(boil.AfterInsertHook, datahistoryjobrelationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	datahistoryjobrelationAfterInsertHooks = []DatahistoryjobrelationHook{}

	AddDatahistoryjobrelationHook(boil.AfterSelectHook, datahistoryjobrelationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	datahistoryjobrelationAfterSelectHooks = []DatahistoryjobrelationHook{}

	AddDatahistoryjobrelationHook(boil.BeforeUpdateHook, datahistoryjobrelationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	datahistoryjobrelationBeforeUpdateHooks = []DatahistoryjobrelationHook{}

	AddDatahistoryjobrelationHook(boil.AfterUpdateHook, datahistoryjobrelationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	datahistoryjobrelationAfterUpdateHooks = []DatahistoryjobrelationHook{}

	AddDatahistoryjobrelationHook(boil.BeforeDeleteHook, datahistoryjobrelationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	datahistoryjobrelationBeforeDeleteHooks = []DatahistoryjobrelationHook{}

	AddDatahistoryjobrelationHook(boil.AfterDeleteHook, datahistoryjobrelationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	datahistoryjobrelationAfterDeleteHooks = []DatahistoryjobrelationHook{}

	AddDatahistoryjobrelationHook(boil.BeforeUpsertHook, datahistoryjobrelationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	datahistoryjobrelationBeforeUpsertHooks = []DatahistoryjobrelationHook{}

	AddDatahistoryjobrelationHook(boil.AfterUpsertHook, datahistoryjobrelationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	datahistoryjobrelationAfterUpsertHooks = []DatahistoryjobrelationHook{}
}

func testDatahistoryjobrelationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Datahistoryjobrelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDatahistoryjobrelationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(datahistoryjobrelationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Datahistoryjobrelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDatahistoryjobrelationToOneDatahistoryjobUsingFollowingJob(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Datahistoryjobrelation
	var foreign Datahistoryjob

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, datahistoryjobrelationDBTypes, false, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, datahistoryjobDBTypes, false, datahistoryjobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjob struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FollowingJobID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FollowingJob().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DatahistoryjobrelationSlice{&local}
	if err = local.L.LoadFollowingJob(ctx, tx, false, (*[]*Datahistoryjobrelation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FollowingJob == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FollowingJob = nil
	if err = local.L.LoadFollowingJob(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FollowingJob == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDatahistoryjobrelationToOneDatahistoryjobUsingPrerequisiteJob(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Datahistoryjobrelation
	var foreign Datahistoryjob

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, datahistoryjobrelationDBTypes, false, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, datahistoryjobDBTypes, false, datahistoryjobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjob struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PrerequisiteJobID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PrerequisiteJob().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DatahistoryjobrelationSlice{&local}
	if err = local.L.LoadPrerequisiteJob(ctx, tx, false, (*[]*Datahistoryjobrelation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PrerequisiteJob == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PrerequisiteJob = nil
	if err = local.L.LoadPrerequisiteJob(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PrerequisiteJob == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDatahistoryjobrelationToOneSetOpDatahistoryjobUsingFollowingJob(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Datahistoryjobrelation
	var b, c Datahistoryjob

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, datahistoryjobrelationDBTypes, false, strmangle.SetComplement(datahistoryjobrelationPrimaryKeyColumns, datahistoryjobrelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, datahistoryjobDBTypes, false, strmangle.SetComplement(datahistoryjobPrimaryKeyColumns, datahistoryjobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, datahistoryjobDBTypes, false, strmangle.SetComplement(datahistoryjobPrimaryKeyColumns, datahistoryjobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Datahistoryjob{&b, &c} {
		err = a.SetFollowingJob(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FollowingJob != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FollowingJobDatahistoryjobrelations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FollowingJobID != x.ID {
			t.Error("foreign key was wrong value", a.FollowingJobID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FollowingJobID))
		reflect.Indirect(reflect.ValueOf(&a.FollowingJobID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FollowingJobID != x.ID {
			t.Error("foreign key was wrong value", a.FollowingJobID, x.ID)
		}
	}
}
func testDatahistoryjobrelationToOneSetOpDatahistoryjobUsingPrerequisiteJob(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Datahistoryjobrelation
	var b, c Datahistoryjob

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, datahistoryjobrelationDBTypes, false, strmangle.SetComplement(datahistoryjobrelationPrimaryKeyColumns, datahistoryjobrelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, datahistoryjobDBTypes, false, strmangle.SetComplement(datahistoryjobPrimaryKeyColumns, datahistoryjobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, datahistoryjobDBTypes, false, strmangle.SetComplement(datahistoryjobPrimaryKeyColumns, datahistoryjobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Datahistoryjob{&b, &c} {
		err = a.SetPrerequisiteJob(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PrerequisiteJob != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PrerequisiteJobDatahistoryjobrelations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PrerequisiteJobID != x.ID {
			t.Error("foreign key was wrong value", a.PrerequisiteJobID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PrerequisiteJobID))
		reflect.Indirect(reflect.ValueOf(&a.PrerequisiteJobID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PrerequisiteJobID != x.ID {
			t.Error("foreign key was wrong value", a.PrerequisiteJobID, x.ID)
		}
	}
}

func testDatahistoryjobrelationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDatahistoryjobrelationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DatahistoryjobrelationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDatahistoryjobrelationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Datahistoryjobrelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	datahistoryjobrelationDBTypes = map[string]string{`ID`: `INTEGER`, `PrerequisiteJobID`: `TEXT`, `FollowingJobID`: `TEXT`}
	_                             = bytes.MinRead
)

func testDatahistoryjobrelationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(datahistoryjobrelationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(datahistoryjobrelationAllColumns) == len(datahistoryjobrelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Datahistoryjobrelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDatahistoryjobrelationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(datahistoryjobrelationAllColumns) == len(datahistoryjobrelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Datahistoryjobrelation{}
	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Datahistoryjobrelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, datahistoryjobrelationDBTypes, true, datahistoryjobrelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Datahistoryjobrelation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(datahistoryjobrelationAllColumns, datahistoryjobrelationPrimaryKeyColumns) {
		fields = datahistoryjobrelationAllColumns
	} else {
		fields = strmangle.SetComplement(
			datahistoryjobrelationAllColumns,
			datahistoryjobrelationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DatahistoryjobrelationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
